buildscript {
    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "com.github.piacenti:antlr-kotlin-gradle-plugin:$antlrKotlinVersion"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:1.4.20"

    }
}
plugins {
    id 'org.jetbrains.kotlin.multiplatform' version '1.4.20'
    id "org.jetbrains.kotlin.plugin.serialization" version "1.4.20"
    id("org.jetbrains.dokka") version "1.4.20"
    id("io.github.gradle-nexus.publish-plugin") version "1.0.0"
}
apply plugin: 'maven-publish'
apply plugin: 'maven'
apply plugin: 'antlr'
apply plugin: 'signing'


repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
}

//dependencies {
//     antlr 'org.antlr:antlr4:4.7.1'
//}

kotlin {
    jvm() { // Creates a JVM target with the default name 'jvm'
        withJava()
    }
    js() {// JS target named 'js'
        browser {
            testTask {
                useKarma {
                    useChromeHeadless()
                }
            }
        }
    }

    sourceSets {
        commonAntlr {
            dependencies {
                api kotlin("stdlib-common")
                // add antlr-kotlin-runtime
                // otherwise, the generated sources will not compile
                api "com.github.piacenti:antlr-kotlin-runtime:$antlrKotlinVersion"
                // antlr-kotlin-runtime-jvm is automatically added as an jvm dependency by gradle
            }
            // you have to add the generated sources the to the kotlin compiler source directory list
            // this is not required if you use src/commonAntlr/kotlin
            // and want to add the generated sources to version control
            kotlin.srcDir("build/generated-src/commonAntlr/kotlin")
        }
        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:$serialization_version"
                api "com.github.piacenti:antlr-kotlin-runtime:$antlrKotlinVersion"
            }
        }
        commonTest {
            dependsOn commonAntlr
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
            }
        }
        jvmMain {
            dependsOn commonMain
            dependencies {
                implementation (kotlin('stdlib-jdk8'))
                implementation 'org.apache.logging.log4j:log4j-api:2.12.1'
                implementation 'org.apache.logging.log4j:log4j-core:2.12.1'
                implementation 'org.apache.logging.log4j:log4j-slf4j-impl:2.12.1'
            }
        }
        // JVM-specific tests and their dependencies:

        jvmTest {
            kotlin.srcDirs(["$buildDir/generated-src/antlr"] as Set)
            dependsOn commonTest
            dependencies {
                implementation kotlin('test-junit')
//                implementation "org.antlr:antlr4-runtime:4.7.1"
                implementation 'com.thoughtworks.xstream:xstream:1.4.7'
            }
        }
        js().compilations.all {
            kotlinOptions {
                moduleKind = "commonjs"
                sourceMap = true
                sourceMapEmbedSources = "always"
            }
        }
        jsMain {
            dependsOn commonMain
            dependencies {
                implementation kotlin('stdlib-js')
            }
        }
        jsTest {
            dependsOn commonTest
            dependencies {
                implementation kotlin('test-js')

            }
        }
    }
}
//generateTestGrammarSource {
//    source = project.objects
//            .sourceDirectorySet("antlr", "antlr")
//            .srcDir("src/jvmTest/antlr").with {
//        include("*.g4")
//    }
//    arguments.addAll(["-package", "antlr.jvm"/*,"-atn"*/])
//    outputDirectory = file("$projectDir/src/jvmTest/java/antlr/jvm")
//}


task generateKotlinCommonGrammarSource(type: com.strumenta.antlrkotlin.gradleplugin.AntlrKotlinTask) {
    // the classpath used to run antlr code generation
    antlrClasspath = configurations.detachedConfiguration(
            project.dependencies.create("com.github.piacenti:antlr-kotlin-target:$antlrKotlinVersion")
    )
    maxHeapSize = "64m"
    packageName = "piacenti.dslmaker.antlr.generated"
//    arguments = ["-atn"]
    source = project.objects
            .sourceDirectorySet("antlr", "antlr")
            .srcDir("src/commonAntlrTest/antlr").with {
        include("*.g4")
    }
    // outputDirectory is required, put it into the build directory
    // if you do not want to add the generated sources to version control
    outputDirectory = file("$buildDir/generated-src/commonAntlr/kotlin")
}
compileTestKotlinJvm.dependsOn generateKotlinCommonGrammarSource
compileTestKotlinJs.dependsOn generateKotlinCommonGrammarSource
jvmTest {
    jvmArgs "-Dlog.level=ERROR", "-Xmx2048M"
}
task fixAntlrKotlinBugs() {
    group = "build"
    doLast {
        file("$buildDir/generated-src/commonAntlr/kotlin").traverse { f ->
            if (f.isFile()) {
                //remove java files
                if (f.name.endsWith(".java"))
                    f.delete()
            }
        }
    }
}

generateKotlinCommonGrammarSource.finalizedBy fixAntlrKotlinBugs

task javadocJar(type: Jar, dependsOn: dokkaHtml) {
    archiveClassifier.set('javadoc')
    from dokkaHtml.outputDirectory
}
task sourcesJar(type: Jar) {
    archiveClassifier.set("sources")
    from sourceSets.main.allSource
}
artifacts {
    archives javadocJar, sourcesJar
}

// publish by calling tasks
// publishAllPublicationsToMavenCentralRepository closeAndReleaseMavenCentralStagingRepository
group = "com.github.piacenti"
version = "1.1.33"
nexusPublishing {
    repositories {
        mavenCentral {
            username = System.getenv("ossrhTokenId")
            password = System.getenv("ossrhPTokenValue")
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
        }
    }
}
publishing {
    publications{
        all {
            pom{
                artifact javadocJar
                name =group+":"+project.name
                // optionally artifactId can be defined here
                description ='''Kotlin multiplatform library to facilitate creation of DSLs with ANTLR or a simple built in parser'''
                url ='https://github.com/piacenti/dsl-maker'

                scm {
                    connection ='scm:git:git://github.com/piacenti/dsl-maker.git'
                    developerConnection ='scm:git:ssh://github.com/piacenti/dsl-maker.git'
                    url ='https://github.com/piacenti/dsl-maker/tree/main'
                }

                licenses {
                    license {
                        name ='The Apache License, Version 2.0'
                        url ='http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        name ='Gabriel Piacenti'
                        email ='piacenti10@gmail.com'
                    }
                }
            }
        }
    }
}
signing {
    def signingKey = System.getenv("signingKey")
    def signingPassword = System.getenv("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)
    publishing.publications.forEach{
        sign it
    }
}